on:
  push:
    tags:
      - '*'

  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    # always remember that windows is powershell
    timeout-minutes: 15

    env:
      AppSettings_Path: test_data\appsettings.json
      Project_Path: test_data\maui-app.csproj

    steps:
    - name: Check out current repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: repository variable list
      run: gh variable list
      env:
        GH_TOKEN: ${{ secrets.PAT }}

    - name: Update AppSettings.json and .csproj
      id: info
      uses: Reality-Check-Inc/secrets-json-action@v1.9.4
      with:
        secrets: ${{ secrets.SECRETS_JSON }}
        appsettings: "${{ env.AppSettings_Path }}"
        csproj: "${{ env.Project_Path }}"
        buildversion: "${{ vars.BUILDVERSION }}"
        buildflavor: Windows
        printFile: true
      env:
        GH_TOKEN: ${{ secrets.PAT }}

    # By default, Linux runners use the bash shell,
    # so you must use the syntax $NAME.
    # By default, Windows runners use PowerShell,
    # so you would use the syntax $env:NAME
    # Use the output from the `info` step
    - name: Set variables
      run: |
        gh variable set BUILDVERSION --body "${{ steps.info.outputs.version }}"
        echo "build_version=${{ steps.info.outputs.version }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "build_timestamp=${{ steps.info.outputs.timestamp }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "build_date=${{ steps.info.outputs.date }}" | Out-File -FilePath $env:GITHUB_ENV -Append
      env:
        GH_TOKEN: ${{ secrets.PAT }}

    - name: Show the variables
      run: |
        echo "${{ env.build_version }}"
        echo "${{ env.build_timestamp }}"
        echo "${{ env.build_date }}"

    - name: repository variable list
      run: gh variable list
      env:
        GH_TOKEN: ${{ secrets.PAT }}
